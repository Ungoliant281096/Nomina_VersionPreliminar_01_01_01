<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>